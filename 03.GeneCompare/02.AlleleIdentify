
###############################################
## ALLELE Identify pipline
###############################################

#### BLAST
diamond makedb --in HAPA.pep.fa --db HAPA
diamond makedb --in HAPB.pep.fa --db HAPB

diamond blastp --threads 10 --db HAPB.dmnd --query HAPA.pep.fa --outfmt 6 --evalue 1e-10 --max-target-seqs 20 --out HAPA2HAPB.outblast
diamond blastp --threads 10 --db HAPA.dmnd --query HAPB.pep.fa --outfmt 6 --evalue 1e-10 --max-target-seqs 20 --out HAPB2HAPA.outblast

cut -f 1,2,12 HAPA2HAPB.outblast > HAPA2HAPB.score
cut -f 1,2,12 HAPB2HAPA.outblast > HAPB2HAPA.score
~/tools/genetribe/genetribe RBH -a HAPA2HAPB.score -b HAPB2HAPA.score > allele2blast.final.out

###### 共线性 -- wgdi
#### Data ready
mamba  create -c bioconda -c conda-forge -n wgdi wgdi
conda activate wgdi

python .generate_conf.py -p hp1 /public1/node3_liushk/tmp/01.genome.mask/HAP1.fasta HAPA.final.longest.gff
python 01.generate_conf.py -p hp2 /public1/node3_liushk/tmp/01.genome.mask/HAP2.fasta HAPB.final.longest.gff

awk '{print $7"\t"$2}' hp1.gff > chang.id.hp1
awk '{print $7"\t"$2}' hp2.gff > chang.id.hp2

while read i ; do diamond makedb --in $i'.pep.fa' --db $i --threads 10; done < list
while read i ; do diamond blastp --threads 10 --db CskiameaA.dmnd --query $i'.pep.fa' --outfmt 6 --evalue 1e-5 --max-target-seqs 40 --out 'csi2'$i'.wgdi.blastp.txt' ; done < list
while read i ; do diamond blastp --threads 10 --db $i'.dmnd' --query CskiameaA.pep.fa --outfmt 6 --evalue 1e-5 --max-target-seqs 40 --out $i'2csiA.wgdi.blastp.txt' ; done < list

#### wgdi
### first get the Dotplot && block
[dotplot]
gff1 = 00.data/hp1.gff
gff2 = 00.data/hp2.gff
lens1 = 00.data/hp1.order.len
lens2 = 00.data/hp2.len
blast = 00.data/csi.wgdi.blastp.txt
blast_reverse = false
genome1_name =  C. skiamea(A)
genome2_name =  C. skiamea(B)
multiple  = 1
score = 100
evalue = 1e-5
repeat_number = 10
position = order
ancestor_left = none
ancestor_top = none
markersize = 0.5
figsize = 10,10
savefig = csi.wgdi.dot.pdf
```
wgdi -d 01.csi.wgdi.conf
```

[collinearity]
gff1 = 00.data/hp1.gff
gff2 = 00.data/hp2.gff
lens1 = 00.data/hp1.len
lens2 = 00.data/hp2.len
blast = 00.data/csi.wgdi.blastp.txt
blast_reverse = false
multiple  = 1
process = 10
evalue = 1e-5
score = 100
grading = 50,40,25
mg = 40,40
pvalue = 0.2
repeat_number = 10
positon = order
savefile = csi.wgdi.collinearity.txt
```
wgdi -icl 01.csi.wgdi.conf


##### 基因功能及名称注释
################################################################################################################################
## /public1/node3_shicy/interpro/01.csiA
################################################################################################################################

nohup emapper.py -i CskiameaA.pep.fa --output 01.CsiA -m diamond -d euk --data_dir /public1/db/eggnog-mapper-data/ --cpu 10 &
nohup emapper.py -i CskiameaB.pep.fa --output 01.CsiB -m diamond -d euk --data_dir /public1/db/eggnog-mapper-data/ --cpu 10 &

## emapper.py -i 02.cgi.pep.fa --output 03.cgi -m diamond -d euk --data_dir /public1/db/eggnog-mapper-data/ --cpu 20

## grep -v "#" 01.CsiA.emapper.annotations > ../02.csiA.anno
## seqkit fx2tab -l -n CskiameaA.pep.fa | awk '{print $1"\t"$2}' > ../03.csiA.tab


library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
options(stringsAsFactors = F)

readxl::read_excel('ALLELE.xlsx') -> ALLEL
readxl::read_excel('ALLELE.xlsx') -> ALLEL

## readxl::read_excel('Cgigas.emapper.annotations.xlsx') -> cgi_emapper
csiA_emapper <- read_delim('02.csiA.anno',"\t", escape_double = FALSE, trim_ws = TRUE,col_names = F)
csiB_emapper <- read_delim('02.csiB.anno',"\t", escape_double = FALSE, trim_ws = TRUE,col_names = F)

csiA_emapper <- csiA_emapper[,c(1,2,9,6)]
csiB_emapper <- csiB_emapper[,c(1,2,9,6)]

colnames(csiA_emapper) <- c("CsiA","ortholog_cgi","name_cgi","lvl_cgi")
colnames(csiB_emapper) <- c("CsiB","ortholog_csi","name_csi","lvl_csi")

merge(ALLEL,csiA_emapper,by="CsiA", all.x=T) -> ALLEL
merge(ALLEL,csiB_emapper,by="CsiB", all.x=T) -> ALLEL

#### 根据基因长度和名字进行筛选
data1 <- ALLEL
data1[is.na(data1)] = "-"

data2 <- data1[(data1$ortholog_csi==data1$ortholog_cgi) &  data1$ortholog_csi!="-",]
data3 <- data1[(data1$name_csi == data1$name_cgi &  data1$name_cgi!="-" ),]
data4 <- data1[data1$Apep_len>data1$Bpep_len*0.75 & data1$Apep_len*0.75 < data1$Bpep_len & (data1$ortholog_csi=="-" & data1$ortholog_cgi=="-" ),]
data5 <- rbind(data2,data3,data4)
data5<-data5[!duplicated(data5),]

data5 <- data5[data5$lvl_cgi=="33208|Metazoa" | data5$lvl_cgi=="2759|Eukaryota" | data5$lvl_cgi=="-", ]

write.csv(data5,'ALLELE.final.csv')
save.image('data.Rdata')
